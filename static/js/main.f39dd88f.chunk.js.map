{"version":3,"sources":["top/top.js","components/sidebar.js","components/card.js","App.js","config.js","reportWebVitals.js","index.js"],"names":["Top","className","UserInput","props","useState","value","setValue","onSubmit","event","preventDefault","zipCode","zipcode","data","type","onChange","target","Card","arr","weather","src","alt","Math","round","toUpperCase","slice","App","weatherData","setWeatherState","findCity","a","undefined","x","url","request","error","res","body","JSON","parse","console","log","cod","message","main","temp","name","icon","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0oBAMeA,EAJH,WACV,OAAO,qBAAKC,UAAU,uBAAf,0BC4BMC,G,OA5BG,SAACC,GACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,qBAAKL,UAAU,cAAf,SACE,uBAAMM,SATY,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAU,CAAEC,QAASN,GAE3BF,EAAMS,KAAKF,IAKT,UACE,kCACG,IACD,uBAAOG,KAAK,OAAOR,MAAOA,EAAOS,SAhBzB,SAACN,GACfF,EAASE,EAAMO,OAAOV,aAiBlB,wBAAQQ,KAAK,SAASZ,UAAU,SAAhC,2BCYOe,G,OAlCF,SAACb,GACZ,IAAMc,EACgB,0BAApBd,EAAMe,UACF,wBACAf,EAAMe,UAEZ,MAAe,0BAARD,EACL,qBAAKhB,UAAU,KAAf,0CAEA,8BACE,sBAAKA,UAAU,qDAAf,UACE,qBACEkB,IAAG,2CAAsCF,EAAI,GAA1C,WACHhB,UAAU,iCACVmB,IAAI,aAEN,sBAAKnB,UAAU,oBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,qBAAKA,UAAU,OAAf,SACE,oBAAIA,UAAU,iCAAd,SAAgDgB,EAAI,SAGxD,oBAAGhB,UAAU,4BAAb,UACGoB,KAAKC,MAAML,EAAI,IADlB,cAGA,mBAAGhB,UAAU,4BAAb,SACGgB,EAAI,GAAG,GAAGM,cAAgBN,EAAI,GAAGO,MAAM,eCmCrCC,MArDf,WACE,MAAuCrB,mBAAS,yBAAhD,mBAAOsB,EAAP,KAAoBC,EAApB,KACMC,EAAQ,uCAAG,WAAOzB,GAAP,iBAAA0B,EAAA,8DACDC,IAAV3B,EADW,iDAIP4B,EAAI5B,EAAMQ,QAEVqB,EACJ,8DAAuDD,EAAvD,6BClBM,mCDqBRE,IAAQD,GAAK,SAAUE,EAAOC,EAAKC,GACjC,IAAMxB,EAAOyB,KAAKC,MAAMF,GACpBF,IACFP,EAAgB,yBAChBY,QAAQC,IAAIN,IAGdP,EAAgBf,MAjBL,2CAAH,sDAwCd,OACE,sBAAKX,UAAU,8CAAf,UACE,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,CAAWA,UAAU,GAAGW,KAAMgB,IAC9B,cAAC,EAAD,CAAMV,QAxBU,SAACf,GACnB,OACsB,MAApBuB,EAAYe,KACI,0BAAhBf,GACgB,OAAhBA,GACwB,mBAAxBA,EAAYgB,SACY,qBAAxBhB,EAAYgB,QAML,CAJMhB,EAAYiB,KAAKC,KACblB,EAAYmB,KAChBnB,EAAYR,QAAQ,GAAG4B,KACvBpB,EAAYR,QAAQ,GAAG6B,aAG7B,+BEnCEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f39dd88f.chunk.js","sourcesContent":["import \"./top.css\";\n\nconst Top = () => {\n  return <div className=\"  header tc ph4 br3 \">Weather App</div>;\n};\n\nexport default Top;\n","import { useState } from \"react\";\nimport \"./sidebar.css\";\n\nconst UserInput = (props) => {\n  const [value, setValue] = useState(\"\");\n  const zipCode = (event) => {\n    setValue(event.target.value);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const zipCode = { zipcode: value };\n\n    props.data(zipCode);\n  };\n\n  return (\n    <div className=\"sidebar tc \">\n      <form onSubmit={submitHandler}>\n        <label>\n          {\" \"}\n          <input type=\"text\" value={value} onChange={zipCode}></input>\n        </label>\n        <button type=\"submit\" className=\"button\">\n          submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default UserInput;\n","import \"./card.css\";\nconst Card = (props) => {\n  const arr =\n    props.weather() === \"no weather to display\"\n      ? \"no weather to display\"\n      : props.weather();\n\n  return arr === \"no weather to display\" ? (\n    <div className=\"tc\">Please enter a valid ZipCode</div>\n  ) : (\n    <div>\n      <div className=\"br2  dark-gray  mv5 w-100 w-50-m w-40-l mw5 center\">\n        <img\n          src={`http://openweathermap.org/img/wn/${arr[2]}@2x.png`}\n          className=\"db center bg-black w-50 br4 br\"\n          alt=\"weather.\"\n        />\n        <div className=\"pa2 ph2-ns pb3-ns\">\n          <div className=\"dt w-100 mt1\">\n            <div className=\"dtc \">\n              <h1 className=\"f5 f4-ns mv0 bg-light-gray br4\">{arr[1]}</h1>\n            </div>\n          </div>\n          <p className=\"  f6 lh-copy measure mt2 \">\n            {Math.round(arr[0])} degrees\n          </p>\n          <p className=\"  f6 lh-copy measure mt2 \">\n            {arr[3][0].toUpperCase() + arr[3].slice(1)}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import \"./App.css\";\nimport \"tachyons\";\n\nimport myKey from \"./config.js\";\nimport request from \"request\";\nimport { useState } from \"react\";\nimport Top from \"./top/top.js\";\nimport UserInput from \"./components/sidebar.js\";\nimport Card from \"./components/card.js\";\nfunction App() {\n  const [weatherData, setWeatherState] = useState(\"no weather to display\");\n  const findCity = async (props) => {\n    if (props === undefined) {\n      return;\n    } else {\n      const x = props.zipcode;\n\n      const url =\n        `https://api.openweathermap.org/data/2.5/weather?zip=${x},us&units=imperial&appid=` +\n        myKey;\n\n      request(url, function (error, res, body) {\n        const data = JSON.parse(body);\n        if (error) {\n          setWeatherState(\"no weather to display\");\n          console.log(error);\n        }\n\n        setWeatherState(data);\n      });\n    }\n  };\n\n  const temperature = (props) => {\n    if (\n      weatherData.cod !== 401 &&\n      weatherData !== \"no weather to display\" &&\n      weatherData !== null &&\n      weatherData.message !== \"city not found\" &&\n      weatherData.message !== \"invalid zip code\"\n    ) {\n      const temp = weatherData.main.temp;\n      const cityName = weatherData.name;\n      const icon = weatherData.weather[0].icon;\n      const desc = weatherData.weather[0].description;\n      return [temp, cityName, icon, desc];\n    } else {\n      return \"no weather to display\";\n    }\n  };\n\n  return (\n    <div className=\"mw5 mw7-ns center bg-light-gray pa3 ph5-ns \">\n      <div className=\"center\">\n        <Top></Top>\n      </div>\n      <UserInput className=\"\" data={findCity}></UserInput>\n      <Card weather={temperature}></Card>\n    </div>\n  );\n}\n\nexport default App;\n","const myKey = \"94a18c7e0e9b7b5c28023a28013b07ac\";\n\nexport default myKey;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}