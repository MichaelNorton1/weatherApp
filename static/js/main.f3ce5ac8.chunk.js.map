{"version":3,"sources":["top/top.js","components/sidebar.js","components/card.js","App.js","reportWebVitals.js","index.js"],"names":["Top","className","Sidebar","props","useState","value","setValue","onSubmit","event","preventDefault","zipCode","zipcode","data","type","onChange","target","Card","arr","weather","alt","src","App","weatherData","setWeatherState","findCity","a","x","url","request","error","res","body","JSON","parse","console","log","main","temp","name","icon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6mBAMeA,EAJH,WACV,OAAO,qBAAKC,UAAU,SAAf,0BC2BMC,G,OA3BC,SAACC,GACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OACE,qBAAKL,UAAU,UAAf,SACE,uBAAMM,SARY,SAACC,GACrBA,EAAMC,iBACN,IAAMC,EAAU,CAAEC,QAASN,GAC3BF,EAAMS,KAAKF,IAKT,UACE,kCACG,IACD,uBAAOG,KAAK,OAAOR,MAAOA,EAAOS,SAfzB,SAACN,GACfF,EAASE,EAAMO,OAAOV,aAgBlB,wBAAQQ,KAAK,SAASZ,UAAU,SAAhC,2BCPOe,EAfF,SAACb,GACZ,IAAMc,EAAMd,EAAMe,UAElB,OACE,gCACE,qBACEC,IAAI,GACJC,IAAG,2CAAsCH,EAAI,GAA1C,aAEL,gCAAMA,EAAI,GAAV,cACA,8BAAMA,EAAI,SCoCDI,MAvCf,WACE,MAAuCjB,mBAAS,yBAAhD,mBAAOkB,EAAP,KAAoBC,EAApB,KACMC,EAAQ,uCAAG,WAAOrB,GAAP,iBAAAsB,EAAA,sDACTC,EAAIvB,EAAMQ,QAEVgB,EAHS,8DAGoDD,EAHpD,6DAKfE,IAAQD,GAAK,SAAUE,EAAOC,EAAKC,GAEjC,IAAML,EAAIM,KAAKC,MAAMF,GAErBR,EAAgBG,MATH,2CAAH,sDAyBd,OADAQ,QAAQC,IAAIb,GAEV,sBAAKrB,UAAU,MAAf,UACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAASW,KAAMY,OAEjB,cAAC,EAAD,CAAMN,QAlBU,WAClB,MAAoB,0BAAhBI,EAIK,CAHMA,EAAYc,KAAKC,KACbf,EAAYgB,KAChBhB,EAAYJ,QAAQ,GAAGqB,MAG7B,MAYP,4BC7BSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3ce5ac8.chunk.js","sourcesContent":["import \"./top.css\";\n\nconst Top = () => {\n  return <div className=\"header\">Weather App</div>;\n};\n\nexport default Top;\n","import { useState } from \"react\";\nimport \"./sidebar.css\";\n\nconst Sidebar = (props) => {\n  const [value, setValue] = useState(\"\");\n  const zipCode = (event) => {\n    setValue(event.target.value);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    const zipCode = { zipcode: value };\n    props.data(zipCode);\n  };\n\n  return (\n    <div className=\"sidebar\">\n      <form onSubmit={submitHandler}>\n        <label>\n          {\" \"}\n          <input type=\"text\" value={value} onChange={zipCode}></input>\n        </label>\n        <button type=\"submit\" className=\"button\">\n          submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","const Card = (props) => {\n  const arr = props.weather();\n\n  return (\n    <div>\n      <img\n        alt=\"\"\n        src={`http://openweathermap.org/img/wn/${arr[2]}@2x.png`}\n      ></img>\n      <div>{arr[0]} degrees</div>\n      <div>{arr[1]}</div>\n    </div>\n  );\n};\n\nexport default Card;\n","import \"./App.css\";\n\nimport request from \"request\";\nimport { useState } from \"react\";\nimport Top from \"./top/top.js\";\nimport Sidebar from \"./components/sidebar.js\";\nimport Card from \"./components/card.js\";\nfunction App() {\n  const [weatherData, setWeatherState] = useState(\"no weather to display\");\n  const findCity = async (props) => {\n    const x = props.zipcode;\n\n    const url = `https://api.openweathermap.org/data/2.5/weather?zip=${x},us&units=imperial&appid=56ef537d238ede2db0841928d59d3e33`;\n\n    request(url, function (error, res, body) {\n      //console.log(error);\n      const x = JSON.parse(body);\n\n      setWeatherState(x);\n    });\n  };\n\n  const temperature = () => {\n    if (weatherData !== \"no weather to display\") {\n      const temp = weatherData.main.temp;\n      const cityName = weatherData.name;\n      const icon = weatherData.weather[0].icon;\n      return [temp, cityName, icon];\n    } else {\n      return \"\"; // I can make an array here and check the length in\n      // the card to decide what to display\n    }\n  };\n  console.log(weatherData);\n  return (\n    <div className=\"App\">\n      <div>\n        <Top></Top>\n        <Sidebar data={findCity}></Sidebar>\n      </div>\n      <Card weather={temperature}></Card>\n      <div></div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}